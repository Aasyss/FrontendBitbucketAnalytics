{"version":3,"file":"authllizer-ngx.umd.js","sources":["../src/ngx.http.ts","../src/authllizer.module.ts","../src/token.interceptor.ts"],"sourcesContent":["import { IHttpRequestOptions, BaseHttpClient } from '@authllizer/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nexport class NgxHttpClient extends BaseHttpClient {\r\n\r\n    protected _client: HttpClient;\r\n\r\n    constructor(httpClient: HttpClient) {\r\n        super(httpClient);\r\n    }\r\n\r\n    public request<T>(url: string, options: IHttpRequestOptions): Promise<T> {\r\n        let { method, data, params, headers, withCredentials } = options;\r\n        return this._client.request(method, url, {\r\n            body: data,\r\n            params,\r\n            headers,\r\n            withCredentials\r\n        }).toPromise() as any;\r\n    }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\r\nimport { Authllizer, IAuthllizerOptions } from '@authllizer/core';\r\nimport { NgxHttpClient } from './ngx.http';\r\n\r\n@NgModule({\r\n    imports: [\r\n        HttpClientModule\r\n    ]\r\n})\r\nexport class AuthllizerModule {\r\n    static forRoot(options: IAuthllizerOptions): ModuleWithProviders {\r\n        return {\r\n            ngModule: AuthllizerModule,\r\n            providers: [{\r\n                provide: Authllizer,\r\n                useFactory(http: HttpClient) {\r\n                    options.httpClient = options.httpClient || new NgxHttpClient(http);\r\n                    return new Authllizer(options);\r\n                },\r\n                deps: [HttpClient]\r\n            }]\r\n        };\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Authllizer } from '@authllizer/core';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n\r\n    get _auth(): Authllizer {\r\n        return this.injector.get(Authllizer);\r\n    }\r\n\r\n    constructor(private injector: Injector) {\r\n    }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        let { url, headers } = request;\r\n\r\n        if (!headers.has('Authorization') && this._auth.toIntercept(url)) {\r\n            let header = this._auth.getToken().toHeader();\r\n            request = request.clone({ setHeaders: { 'Authorization': header } });\r\n        }\r\n\r\n        return next.handle(request);\r\n\r\n    }\r\n}\r\n"],"names":["tslib_1.__extends","BaseHttpClient","Authllizer","http","HttpClient","NgModule","HttpClientModule","Injectable","Injector"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;IAAmCA,iCAAc;IAI7C,uBAAY,UAAsB;eAC9B,kBAAM,UAAU,CAAC;KACpB;IAEM,+BAAO,GAAd,UAAkB,GAAW,EAAE,OAA4B;QACjD,IAAA,uBAAM,EAAE,mBAAI,EAAE,uBAAM,EAAE,yBAAO,EAAE,yCAAe,CAAa;QACjE,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE;YACrC,IAAI,EAAE,IAAI;YACV,MAAM,QAAA;YACN,OAAO,SAAA;YACP,eAAe,iBAAA;SAClB,CAAC,CAAC,SAAS,EAAS,CAAC;KACzB;IACL,oBAAC;CAAA,CAjBkCC,mBAAc;;ACOjD;IAAA;KAcC;yBAdY,gBAAgB;IAClB,wBAAO,GAAd,UAAe,OAA2B;QACtC,OAAO;YACH,QAAQ,EAAE,kBAAgB;YAC1B,SAAS,EAAE,CAAC;oBACR,OAAO,EAAEC,eAAU;oBACnB,UAAU,YAACC,OAAgB;wBACvB,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,IAAI,aAAa,CAACA,OAAI,CAAC,CAAC;wBACnE,OAAO,IAAID,eAAU,CAAC,OAAO,CAAC,CAAC;qBAClC;oBACD,IAAI,EAAE,CAACE,eAAU,CAAC;iBACrB,CAAC;SACL,CAAC;KACL;IAbQ,gBAAgB;QAL5BC,eAAQ,CAAC;YACN,OAAO,EAAE;gBACLC,qBAAgB;aACnB;SACJ,CAAC;OACW,gBAAgB,CAc5B;IAAD,uBAAC;;CAAA;;AClBD;IAMI,0BAAoB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;KACrC;IALD,sBAAI,mCAAK;aAAT;YACI,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAACJ,eAAU,CAAC,CAAC;SACxC;;;OAAA;IAKD,oCAAS,GAAT,UAAU,OAAyB,EAAE,IAAiB;QAE5C,IAAA,iBAAG,EAAE,yBAAO,CAAa;QAE/B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;YAC9D,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,CAAC;YAC9C,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,EAAE,eAAe,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;SACxE;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;KAE/B;IApBQ,gBAAgB;QAD5BK,iBAAU,EAAE;yCAOqBC,eAAQ;OAN7B,gBAAgB,CAqB5B;IAAD,uBAAC;CAAA;;;;;;;;;;;;;;"}