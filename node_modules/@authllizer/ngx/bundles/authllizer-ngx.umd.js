/**
* @authllizer/ngx (https://github.com/yisraelx/authllizer#readme)
* @version 0.1.0
* @license MIT
* @copyright Yisrael Eliav <yisraelx@gmail.com> (https://github.com/yisraelx)
*/
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@authllizer/core'), require('@angular/core'), require('@angular/common/http')) :
	typeof define === 'function' && define.amd ? define(['exports', '@authllizer/core', '@angular/core', '@angular/common/http'], factory) :
	(factory((global.authllizer = global.authllizer || {}, global.authllizer.ngx = {}),global.authllizer.core,global.ng.core,global.ng.common));
}(this, (function (exports,core,core$1,http) { 'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}





function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}



function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

var NgxHttpClient = /** @class */ (function (_super) {
    __extends(NgxHttpClient, _super);
    function NgxHttpClient(httpClient) {
        return _super.call(this, httpClient) || this;
    }
    NgxHttpClient.prototype.request = function (url, options) {
        var method = options.method, data = options.data, params = options.params, headers = options.headers, withCredentials = options.withCredentials;
        return this._client.request(method, url, {
            body: data,
            params: params,
            headers: headers,
            withCredentials: withCredentials
        }).toPromise();
    };
    return NgxHttpClient;
}(core.BaseHttpClient));

var AuthllizerModule = /** @class */ (function () {
    function AuthllizerModule() {
    }
    AuthllizerModule_1 = AuthllizerModule;
    AuthllizerModule.forRoot = function (options) {
        return {
            ngModule: AuthllizerModule_1,
            providers: [{
                    provide: core.Authllizer,
                    useFactory: function (http$$1) {
                        options.httpClient = options.httpClient || new NgxHttpClient(http$$1);
                        return new core.Authllizer(options);
                    },
                    deps: [http.HttpClient]
                }]
        };
    };
    AuthllizerModule = AuthllizerModule_1 = __decorate([
        core$1.NgModule({
            imports: [
                http.HttpClientModule
            ]
        })
    ], AuthllizerModule);
    return AuthllizerModule;
    var AuthllizerModule_1;
}());

var TokenInterceptor = /** @class */ (function () {
    function TokenInterceptor(injector) {
        this.injector = injector;
    }
    Object.defineProperty(TokenInterceptor.prototype, "_auth", {
        get: function () {
            return this.injector.get(core.Authllizer);
        },
        enumerable: true,
        configurable: true
    });
    TokenInterceptor.prototype.intercept = function (request, next) {
        var url = request.url, headers = request.headers;
        if (!headers.has('Authorization') && this._auth.toIntercept(url)) {
            var header = this._auth.getToken().toHeader();
            request = request.clone({ setHeaders: { 'Authorization': header } });
        }
        return next.handle(request);
    };
    TokenInterceptor = __decorate([
        core$1.Injectable(),
        __metadata("design:paramtypes", [core$1.Injector])
    ], TokenInterceptor);
    return TokenInterceptor;
}());

exports.default = AuthllizerModule;
exports.TokenInterceptor = TokenInterceptor;
exports.NgxHttpClient = NgxHttpClient;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=authllizer-ngx.umd.js.map
