"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var extend_1 = require("./utils/extend");
var is_string_1 = require("./utils/is-string");
var adapter_1 = require("./adapters/adapter");
var config_1 = require("./config");
var event_emitter_1 = require("./utils/event-emitter");
var Authllizer = /** @class */ (function () {
    function Authllizer(options) {
        if (options === void 0) { options = {}; }
        this._config = new config_1.Config;
        this.onChange = new event_emitter_1.default();
        if (options.useClassInstance !== false) {
            return Authllizer.instance.config(options);
        }
        this.config(options);
    }
    Object.defineProperty(Authllizer, "instance", {
        get: function () {
            if (!this.__instance) {
                this.__instance = new Authllizer({ useClassInstance: false });
            }
            return this.__instance;
        },
        enumerable: true,
        configurable: true
    });
    Authllizer.prototype.config = function (options) {
        this._config.setOptions(options);
        return this;
    };
    Authllizer.prototype.signIn = function (data) {
        var _this = this;
        var options = {
            type: adapter_1.AdapterRequestType.signIn,
            data: data,
            extractToken: true
        };
        return this._config.adapter.request(options).then(function (_a) {
            var response = _a.response, token = _a.token;
            _this.setToken(token);
            return response;
        });
    };
    Authllizer.prototype.signUp = function (data, signIn) {
        var _this = this;
        var options = {
            type: adapter_1.AdapterRequestType.signUp,
            data: data,
            extractToken: signIn
        };
        return this._config.adapter.request(options).then(function (_a) {
            var response = _a.response, token = _a.token;
            if (signIn) {
                _this.setToken(token);
            }
            return response;
        });
    };
    Authllizer.prototype.signOut = function (data) {
        var _this = this;
        var options = {
            type: adapter_1.AdapterRequestType.signOut,
            data: data,
            token: this.getToken()
        };
        return this._config.adapter.request(options).then(function (_a) {
            var response = _a.response;
            _this.removeToken();
            return response;
        });
    };
    Authllizer.prototype.authenticate = function (provider, data) {
        var _this = this;
        var options = {
            type: adapter_1.AdapterRequestType.authenticate,
            data: data,
            extractToken: true,
            provider: provider
        };
        return this._config.provider(provider).authenticate(options).then(function (_a) {
            var response = _a.response, token = _a.token;
            _this.setToken(token);
            return response;
        });
    };
    Authllizer.prototype.link = function (provider, data) {
        var options = {
            type: adapter_1.AdapterRequestType.link,
            data: data,
            token: this.getToken(),
            provider: provider
        };
        return this._config.provider(provider).authenticate(options).then(function (_a) {
            var response = _a.response;
            return response;
        });
    };
    Authllizer.prototype.unlink = function (provider, data) {
        var options = {
            type: adapter_1.AdapterRequestType.unlink,
            data: extend_1.default({ provider: provider }, data),
            token: this.getToken()
        };
        return this._config.adapter.request(options).then(function (_a) {
            var response = _a.response;
            return response;
        });
    };
    Authllizer.prototype.refresh = function (data) {
        var _this = this;
        var options = {
            type: adapter_1.AdapterRequestType.refresh,
            data: data,
            token: this.getToken(),
            extractToken: true
        };
        return this._config.adapter.request(options).then(function (_a) {
            var token = _a.token, response = _a.response;
            _this.setToken(token);
            return response;
        });
    };
    Authllizer.prototype.isAuthenticated = function () {
        var token = this.getToken();
        return token ? token.isValid() : false;
    };
    Authllizer.prototype.getToken = function () {
        var token = this._config.storage.getToken();
        var Token = this._config.token;
        var tokenObject;
        try {
            tokenObject = new Token(token);
        }
        catch (e) {
        }
        return tokenObject;
    };
    Authllizer.prototype.setToken = function (token) {
        if (is_string_1.default(token)) {
            var Token = this._config.token;
            token = new Token(token);
        }
        this._config.storage.setToken(token);
        this.onChange.emit(true);
    };
    Authllizer.prototype.removeToken = function () {
        this._config.storage.removeToken();
        this.onChange.emit(false);
    };
    /**
     * for easily create intercepts, checking if necessary to intercept
     * this method checks to see if there is an authenticated user and if there is a match in config.interceptList
     * @param {string} url - url to check
     * @returns {boolean} - if need to intercept
     */
    Authllizer.prototype.toIntercept = function (url) {
        return this.isAuthenticated() && this._config.isUrlMatchInterceptList(url);
    };
    return Authllizer;
}());
exports.Authllizer = Authllizer;
//# sourceMappingURL=authllizer.js.map