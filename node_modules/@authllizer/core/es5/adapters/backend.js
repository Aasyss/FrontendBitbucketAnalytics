"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var merge_1 = require("../utils/merge");
var extend_class_1 = require("../utils/extend-class");
var is_string_1 = require("../utils/is-string");
var get_1 = require("../utils/get");
var join_url_1 = require("../utils/join-url");
var BackendAdapter = /** @class */ (function () {
    function BackendAdapter(httpClient) {
        this.baseUrl = '/auth';
        this.signIn = '/signin';
        this.signOut = '/signout';
        this.signUp = '/signup';
        this.authenticate = '';
        this.link = '';
        this.unlink = '/unlink';
        this.refresh = '/refresh';
        this.defaultHttpOptions = {
            method: 'POST',
            data: {},
            params: {},
            headers: {},
            withCredentials: false
        };
        this.providerInUrl = true;
        this.tokenPath = 'access_token';
        this._httpClient = httpClient;
    }
    BackendAdapter.prototype.request = function (requestOptions) {
        var _this = this;
        var extractToken = requestOptions.extractToken;
        var stateOptions = this.getDefaultRouteOptions(requestOptions);
        var url = this.prepareUrl(requestOptions, stateOptions);
        var httpOptions = this.prepareOptions(requestOptions, stateOptions);
        return this._httpClient.request(url, httpOptions).then(function (response) {
            var adapterResponse = { response: response };
            if (extractToken) {
                adapterResponse.token = _this.extractToken(response);
            }
            return adapterResponse;
        });
    };
    BackendAdapter.prototype.prepareUrl = function (_a, _b) {
        var provider = _a.provider;
        var url = _b.url;
        if (provider && this.providerInUrl) {
            url = join_url_1.default(url, provider);
        }
        return this.baseUrl ? join_url_1.default(this.baseUrl, url) : url;
    };
    BackendAdapter.prototype.prepareOptions = function (_a, _b) {
        var token = _a.token, provider = _a.provider, data = _a.data;
        var routeHttpOptions = _b.httpOptions;
        var _c = this, defaultHttpOptions = _c.defaultHttpOptions, providerInUrl = _c.providerInUrl;
        var options = {
            data: {},
            params: {},
            headers: {}
        };
        if (provider && !providerInUrl) {
            data['provider'] = provider;
        }
        if (token) {
            options.headers['Authorization'] = token.toHeader();
        }
        var extendOptions = merge_1.default({
            data: {},
            params: {},
            headers: {}
        }, defaultHttpOptions, routeHttpOptions, options);
        extendOptions.method = is_string_1.default(extendOptions.method) ? extendOptions.method.toUpperCase() : 'POST';
        return this.prepareData(extendOptions, data);
    };
    BackendAdapter.prototype.getDefaultRouteOptions = function (_a) {
        var type = _a.type;
        var options = is_string_1.default(this[type]) ? { url: this[type] } : this[type] || {};
        options.url = is_string_1.default(options.url) ? options.url : "/" + type;
        return options;
    };
    BackendAdapter.prototype.prepareData = function (httpOptions, data) {
        var method = httpOptions.method;
        var BODY_METHOD;
        (function (BODY_METHOD) {
            BODY_METHOD[BODY_METHOD["POST"] = 0] = "POST";
            BODY_METHOD[BODY_METHOD["PUT"] = 1] = "PUT";
            BODY_METHOD[BODY_METHOD["PATCH"] = 2] = "PATCH";
        })(BODY_METHOD || (BODY_METHOD = {}));
        if (method in BODY_METHOD) {
            merge_1.default(httpOptions.data, data);
            // remove data if data empty
            if (httpOptions.data && !Object.keys(httpOptions.data).length) {
                delete httpOptions.data;
            }
        }
        else {
            merge_1.default(httpOptions.params, httpOptions.data, data);
            delete httpOptions.data;
        }
        return httpOptions;
    };
    BackendAdapter.prototype.extractToken = function (response) {
        var tokenPath = this.tokenPath;
        return get_1.default(response, tokenPath);
    };
    BackendAdapter.extend = extend_class_1.default;
    return BackendAdapter;
}());
exports.BackendAdapter = BackendAdapter;
//# sourceMappingURL=backend.js.map