"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var normalize_location_1 = require("../utils/normalize-location");
var config_1 = require("../config");
var popup_1 = require("./popup");
var BrowserDialog = /** @class */ (function (_super) {
    __extends(BrowserDialog, _super);
    function BrowserDialog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BrowserDialog.prototype, "dialogName", {
        get: function () {
            return window.navigator.userAgent.indexOf('CriOS') > -1 ? '_blank' : this.name;
        },
        enumerable: true,
        configurable: true
    });
    BrowserDialog.prototype.setDisplayOptions = function (displayOptions) {
        if (displayOptions === void 0) { displayOptions = {}; }
        displayOptions.height = displayOptions.height || 500;
        displayOptions.width = displayOptions.width || 500;
        _super.prototype.setDisplayOptions.call(this, {
            top: window.screenY + ((window.outerHeight - displayOptions.height) / 2.5),
            left: window.screenX + ((window.outerWidth - displayOptions.width) / 2)
        }, displayOptions);
    };
    BrowserDialog.prototype.open = function (url) {
        this._popup = window.open(url, this.dialogName, this.stringDisplayOptions);
        this.focus();
        return this.listen().then(function (url) {
            return BrowserDialog.parseUrl(url);
        });
    };
    BrowserDialog.prototype.listen = function () {
        var _this = this;
        return new config_1.Config.Promise(function (resolve, reject) {
            var redirectUri = normalize_location_1.default(_this.redirectUri, { path: true });
            var intervalId = setInterval(function () {
                if (_this.isClosed()) {
                    clearInterval(intervalId);
                    return reject(new Error('The dialog was closed'));
                }
                try {
                    var url = normalize_location_1.default(_this._popup.location, { path: true, data: true });
                    if (url.indexOf(redirectUri) === 0) {
                        _this.close();
                        clearInterval(intervalId);
                        resolve(url);
                    }
                }
                catch (error) {
                    // Ignore DOMException: Blocked a frame with origin from accessing a cross-origin frame.
                    // A hack to get around same-origin security policy errors in IE.
                }
            }, 500);
        });
    };
    return BrowserDialog;
}(popup_1.PopupDialog));
exports.BrowserDialog = BrowserDialog;
//# sourceMappingURL=browser.js.map