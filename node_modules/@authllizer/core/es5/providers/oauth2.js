"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @resource https://tools.ietf.org/html/rfc6749
 */
var extend_1 = require("../utils/extend");
var for_each_1 = require("../utils/for-each");
var random_string_1 = require("../utils/random-string");
var camel_case_1 = require("../utils/camel-case");
var config_1 = require("../config");
var base_1 = require("./base");
var OAuth2Provider = /** @class */ (function (_super) {
    __extends(OAuth2Provider, _super);
    function OAuth2Provider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.responseType = 'code';
        _this.baseDialogParams = ['client_id', 'scope', 'state', 'redirect_uri', 'response_type'];
        _this.authenticateParams = {
            code: 'code',
            clientId: 'client_id',
            redirectUri: 'redirect_uri'
        };
        return _this;
    }
    Object.defineProperty(OAuth2Provider.prototype, "scope", {
        get: function () {
            var _a = this, _b = _a.scopeParams, scopeParams = _b === void 0 ? [] : _b, scopePrefix = _a.scopePrefix, scopeDelimiter = _a.scopeDelimiter;
            var stringScope = scopeParams.join(scopeDelimiter);
            if (stringScope === '') {
                return void 0;
            }
            return scopePrefix ? [scopePrefix, stringScope].join(scopeDelimiter) : stringScope;
        },
        enumerable: true,
        configurable: true
    });
    OAuth2Provider.prototype.authenticate = function (requestOptions) {
        var _this = this;
        this.state = this.state || random_string_1.default();
        return this.getPermissions().then(function (dialogResponse) {
            return _this.getAccessToken(dialogResponse, requestOptions);
        });
    };
    OAuth2Provider.prototype.getPermissions = function () {
        var _this = this;
        var _a = this, baseDialogParams = _a.baseDialogParams, dialogParams = _a.dialogParams;
        var keys = [].concat(baseDialogParams || [], dialogParams || []);
        var params = [];
        for_each_1.default(keys, function (key) {
            var camelKey = camel_case_1.default(key);
            var value = _this[camelKey];
            if (value != void 0) {
                params.push(key + "=" + value);
            }
        });
        var query = params.join('&');
        var url = [this.authorizationEndpoint, query].join('?');
        return this.openDialog(url);
    };
    OAuth2Provider.prototype.getAccessToken = function (oauthData, requestOptions) {
        if (this.state && oauthData.state !== this.state) {
            return config_1.Config.Promise.reject(new Error('The value returned in the state parameter does not match the state value from your original authorization code request.'));
        }
        if (this.responseType === 'token') {
            var token = oauthData.access_token;
            return config_1.Config.Promise.resolve({ token: token, response: oauthData });
        }
        var authenticateParams = this.authenticateParams;
        var data = this.prepareData(authenticateParams, oauthData);
        requestOptions.data = extend_1.default(data, requestOptions.data);
        return this._adapter.request(requestOptions);
    };
    return OAuth2Provider;
}(base_1.BaseProvider));
exports.OAuth2Provider = OAuth2Provider;
//# sourceMappingURL=oauth2.js.map