"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @resource https://tools.ietf.org/html/rfc5849
 */
var extend_1 = require("../utils/extend");
var stringify_query_1 = require("../utils/stringify-query");
var base_1 = require("./base");
var OAuth1Provider = /** @class */ (function (_super) {
    __extends(OAuth1Provider, _super);
    function OAuth1Provider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.requestTokenParams = {
            redirectUri: 'callback'
        };
        _this.authenticateParams = {
            redirectUri: 'callback',
            oauth_token: 'oauth_token',
            oauth_verifier: 'oauth_verifier'
        };
        return _this;
    }
    OAuth1Provider.prototype.authenticate = function (requestOptions) {
        var _this = this;
        return this.getRequestToken(requestOptions).then(function (requestTokenResponse) {
            return _this.getPermissions(requestTokenResponse).then(function (dialogResponse) {
                return _this.getAccessToken(dialogResponse, requestOptions);
            });
        });
    };
    OAuth1Provider.prototype.getRequestToken = function (_a) {
        var provider = _a.provider, type = _a.type, token = _a.token;
        var requestTokenParams = this.requestTokenParams;
        var data = this.prepareData(requestTokenParams);
        var options = {
            type: type,
            data: data,
            provider: provider,
            token: token
        };
        return this._adapter.request(options).then(function (_a) {
            var response = _a.response;
            return response;
        });
    };
    OAuth1Provider.prototype.getPermissions = function (requestTokenResponse) {
        var query = stringify_query_1.default(requestTokenResponse, { delimiter: '&' });
        var url = [this.authorizationEndpoint, query].join('?');
        return this.openDialog(url);
    };
    OAuth1Provider.prototype.getAccessToken = function (oauthData, requestOptions) {
        var authenticateParams = this.authenticateParams;
        var data = this.prepareData(authenticateParams, oauthData);
        requestOptions.data = extend_1.default(data, requestOptions.data);
        return this._adapter.request(requestOptions);
    };
    return OAuth1Provider;
}(base_1.BaseProvider));
exports.OAuth1Provider = OAuth1Provider;
//# sourceMappingURL=oauth1.js.map