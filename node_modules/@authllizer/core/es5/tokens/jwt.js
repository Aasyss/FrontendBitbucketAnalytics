"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @resource https://tools.ietf.org/html/rfc7519
 */
var decode_base64_1 = require("../utils/decode-base64");
var is_string_1 = require("../utils/is-string");
var JWT = /** @class */ (function () {
    function JWT(token) {
        this.headerPrefix = 'Bearer';
        this._token = String(token);
        this._payload = JWT.parse(this._token);
    }
    JWT.parse = function (token) {
        if (!is_string_1.default(token) || !this.JWT_RX.test(token)) {
            throw new Error('Token is invalid or missing.');
        }
        var _a = token.split('.'), base64Url = _a[1];
        var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        return JSON.parse(decode_base64_1.default(base64));
    };
    Object.defineProperty(JWT.prototype, "expire", {
        get: function () {
            var exp = this._payload.exp;
            return new Date(exp * 1000);
        },
        enumerable: true,
        configurable: true
    });
    JWT.prototype.getPayload = function () {
        return this._payload;
    };
    JWT.prototype.isExpired = function () {
        return new Date() > this.expire;
    };
    JWT.prototype.isValid = function () {
        return !this.isExpired();
    };
    JWT.prototype.toHeader = function () {
        return this.headerPrefix + " " + this._token;
    };
    JWT.prototype.toString = function () {
        return this._token;
    };
    JWT.prototype.toJSON = function () {
        return this._payload;
    };
    JWT.JWT_RX = /^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$/;
    return JWT;
}());
exports.JWT = JWT;
//# sourceMappingURL=jwt.js.map