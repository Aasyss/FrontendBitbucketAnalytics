"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var is_function_1 = require("./utils/is-function");
var is_string_1 = require("./utils/is-string");
var is_object_1 = require("./utils/is-object");
var for_each_1 = require("./utils/for-each");
var normalize_location_1 = require("./utils/normalize-location");
var is_regexp_1 = require("./utils/is-regexp");
var local_1 = require("./storages/local");
var jwt_1 = require("./tokens/jwt");
var backend_1 = require("./adapters/backend");
var browser_1 = require("./dialogs/browser");
var fetch_1 = require("./http/fetch");
var Config = /** @class */ (function () {
    function Config(options) {
        this._options = {
            adapter: backend_1.BackendAdapter,
            dialog: browser_1.BrowserDialog,
            httpClient: new fetch_1.FetchHttpClient(),
            interceptList: [],
            storage: new local_1.LocalStorage(),
            token: jwt_1.JWT
        };
        this.setOptions(options);
    }
    Object.defineProperty(Config.prototype, "adapter", {
        get: function () {
            var Adapter = this._options.adapter;
            if (!is_function_1.default(Adapter)) {
                throw new Error("Config: 'adapter' is missing.");
            }
            return new Adapter(this.httpClient);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "dialog", {
        get: function () {
            var dialog = this._options.dialog;
            if (!is_function_1.default(dialog)) {
                throw new Error("Config: 'dialog' is missing.");
            }
            return dialog;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "httpClient", {
        get: function () {
            var httpClient = this._options.httpClient;
            if (!is_object_1.default(httpClient)) {
                throw new Error("Config: 'httpClient' is missing.");
            }
            return httpClient;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "interceptList", {
        get: function () {
            var interceptList = this._options.interceptList;
            return interceptList || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "storage", {
        get: function () {
            var storage = this._options.storage;
            if (!is_object_1.default(storage)) {
                throw new Error("Config: 'storage' is missing.");
            }
            return storage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "token", {
        get: function () {
            var token = this._options.token;
            if (!is_function_1.default(token)) {
                throw new Error("Config: 'token' is missing.");
            }
            return token;
        },
        enumerable: true,
        configurable: true
    });
    Config.prototype.setOptions = function (options) {
        var _this = this;
        if (!is_object_1.default(options)) {
            return;
        }
        var adapter = options.adapter, dialog = options.dialog, httpClient = options.httpClient, interceptList = options.interceptList, storage = options.storage, token = options.token, providers = options.providers;
        if (adapter) {
            if (!is_function_1.default(adapter)) {
                throw new Error("Config: 'adapter' is invalid.");
            }
            this._options.adapter = adapter;
        }
        if (dialog) {
            if (!is_function_1.default(dialog)) {
                throw new Error("Config: 'dialog' is  invalid.");
            }
            this._options.dialog = dialog;
        }
        if (httpClient) {
            if (!is_object_1.default(httpClient)) {
                throw new Error("Config: 'httpClient' is  invalid.");
            }
            this._options.httpClient = httpClient;
        }
        if (interceptList) {
            if (!Array.isArray(interceptList)) {
                throw new Error("Config: 'interceptList' is  invalid.");
            }
            interceptList.forEach(function (compere) {
                if (!is_string_1.default(compere) && !is_regexp_1.default(compere)) {
                    throw new Error("Config: 'interceptList' invalid compere " + compere);
                }
            });
            this._options.interceptList = interceptList;
        }
        if (storage) {
            if (!is_object_1.default(storage)) {
                throw new Error("Config: 'storage' is invalid.");
            }
            this._options.storage = storage;
        }
        if (token) {
            if (!is_function_1.default(token)) {
                throw new Error("Config: 'token' is invalid.");
            }
            this._options.token = token;
        }
        if (providers) {
            if (!is_object_1.default(providers)) {
                throw new Error("Config: 'providers' is invalid.");
            }
            if (!is_object_1.default(this._options.providers)) {
                this._options.providers = {};
            }
            for_each_1.default(providers, function (provider, name) {
                if (!is_function_1.default(provider)) {
                    throw new Error("Config: 'provider' '" + name + "' is invalid.");
                }
                _this._options.providers[name] = provider;
            });
        }
    };
    Config.prototype.provider = function (provider) {
        var providers = this._options.providers;
        if (!is_string_1.default(provider) || !this.isProviderExists(provider)) {
            throw new Error("Config: '" + provider + "' provider is missing.");
        }
        var Provider = providers[provider];
        if (!is_function_1.default(Provider)) {
            throw new Error("Config: provider should be a class: " + Provider);
        }
        return new Provider(this.adapter, this.dialog);
    };
    Config.prototype.isProviderExists = function (provider) {
        var _a = this._options.providers, providers = _a === void 0 ? {} : _a;
        return !!providers[provider];
    };
    Config.prototype.isUrlMatchInterceptList = function (url) {
        var interceptList = this.interceptList;
        var length = (interceptList || []).length;
        if (!length) {
            return true;
        }
        for (var i = 0; i < length; i++) {
            var compereUrl = interceptList[i];
            if (is_string_1.default(compereUrl)) {
                if (normalize_location_1.default(url) === normalize_location_1.default(compereUrl)) {
                    return true;
                }
            }
            else if (is_regexp_1.default(compereUrl)) {
                if (compereUrl.test(url)) {
                    return true;
                }
            }
        }
        return false;
    };
    Config.Promise = (typeof Promise !== 'undefined' && Promise) || (typeof ES6Promise !== 'undefined' && ES6Promise);
    return Config;
}());
exports.Config = Config;
//# sourceMappingURL=config.js.map