import { IConfigOptions } from './config';
import { IToken } from './tokens/token';
import { Directory } from './interface';
import EventEmitter from './utils/event-emitter';
export interface IAuthllizerOptions extends IConfigOptions {
    /**
     * if to use the Authllizer class instance or create new instance [default: true]
     */
    useClassInstance?: boolean;
}
export declare class Authllizer {
    static __instance: Authllizer;
    static readonly instance: Authllizer;
    private _config;
    onChange: EventEmitter<boolean>;
    constructor(options?: IAuthllizerOptions);
    config(options: IConfigOptions): this;
    signIn<T>(data?: Directory<any>): Promise<T>;
    signUp<T>(data?: Directory<any>, signIn?: boolean): Promise<T>;
    signOut<T>(data?: Directory<any>): Promise<T>;
    authenticate<T>(provider: string, data?: Directory<any>): Promise<T>;
    link<T>(provider: string, data?: Directory<any>): Promise<T>;
    unlink<T>(provider: string, data?: Directory<any>): Promise<T>;
    refresh<T>(data?: Directory<any>): Promise<T>;
    isAuthenticated(): boolean;
    getToken<T extends IToken>(): T;
    setToken(token: string | IToken): void;
    removeToken(): void;
    /**
     * for easily create intercepts, checking if necessary to intercept
     * this method checks to see if there is an authenticated user and if there is a match in config.interceptList
     * @param {string} url - url to check
     * @returns {boolean} - if need to intercept
     */
    toIntercept(url: string): boolean;
}
