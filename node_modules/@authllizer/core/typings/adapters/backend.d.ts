import { IAdapter, IAdapterResponse, IAdapterRequestOptions } from './adapter';
import { Directory } from '../interface';
import { IHttpClient, IHttpRequestOptions } from '../http/http';
export interface IBackendAdapterOptions {
    baseUrl?: string;
    signIn?: string | IBackendRouteOptions;
    signOut?: string | IBackendRouteOptions;
    signUp?: string | IBackendRouteOptions;
    authenticate?: string | IBackendRouteOptions;
    link?: string | IBackendRouteOptions;
    unlink?: string | IBackendRouteOptions;
    refresh?: string | IBackendRouteOptions;
    /**
     * default config for the http requests
     */
    defaultHttpOptions?: IHttpRequestOptions;
    /**
     * for 'authenticate' and 'link' request (if false it will put the provider name in the data)
     * @default true
     */
    providerInUrl?: boolean;
    extractToken?: (response?: any) => string;
    /**
     * the path of the token in the response for extrcting the token from the response
     * @default 'access_token'
     */
    tokenPath?: string;
}
export interface IBackendRouteOptions {
    url?: string;
    httpOptions?: IHttpRequestOptions;
}
export declare class BackendAdapter implements IAdapter {
    static extend: (options: IBackendAdapterOptions) => typeof BackendAdapter;
    protected baseUrl: string;
    protected signIn: string | IBackendRouteOptions;
    protected signOut: string | IBackendRouteOptions;
    protected signUp: string | IBackendRouteOptions;
    protected authenticate: string | IBackendRouteOptions;
    protected link: string | IBackendRouteOptions;
    protected unlink: string | IBackendRouteOptions;
    protected refresh: string | IBackendRouteOptions;
    protected defaultHttpOptions: IHttpRequestOptions;
    protected providerInUrl: boolean;
    protected tokenPath: string;
    private _httpClient;
    constructor(httpClient: IHttpClient);
    request<T>(requestOptions: IAdapterRequestOptions): Promise<IAdapterResponse<T>>;
    protected prepareUrl({provider}: IAdapterRequestOptions, {url}: IBackendRouteOptions): string;
    protected prepareOptions({token, provider, data}: IAdapterRequestOptions, {httpOptions: routeHttpOptions}: IBackendRouteOptions): IHttpRequestOptions;
    protected getDefaultRouteOptions({type}: IAdapterRequestOptions): IBackendRouteOptions;
    protected prepareData(httpOptions: IHttpRequestOptions, data?: Directory<any>): IHttpRequestOptions;
    protected extractToken(response: any): string;
}
