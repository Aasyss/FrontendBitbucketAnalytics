import { IProvider } from './provider';
import { IAdapter, IAdapterResponse, IAdapterRequestOptions } from '../adapters/adapter';
import { IDialogConstructor } from '../dialogs/dialog';
import { Directory } from '../interface';
export interface IBaseProviderOptions {
    name?: string;
    redirectUri?: string;
    authorizationEndpoint?: string;
    displayOptions?: Directory<any>;
    [key: string]: any;
}
export declare abstract class BaseProvider implements IProvider {
    static extend: (options: IBaseProviderOptions) => typeof BaseProvider;
    name: string;
    protected redirectUri: string;
    protected authorizationEndpoint: string;
    protected displayOptions: Directory<any>;
    protected _adapter: IAdapter;
    protected _dialog: IDialogConstructor;
    constructor(adapter: IAdapter, dialogClass: IDialogConstructor);
    protected openDialog<T extends Directory<any>>(url: string): Promise<T>;
    /**
     * this method can be overridden, for handling unique provider dialog errors
     * @param params
     */
    protected checkDialogResponse(params?: Directory<any>): void;
    protected prepareData(requestKeys: Directory<string>, ...args: Directory<any>[]): Directory<any>;
    abstract authenticate<R>(requestOptions: IAdapterRequestOptions): Promise<IAdapterResponse<R>>;
}
