import { BaseProvider, IBaseProviderOptions } from './base';
import { IAdapterResponse, IAdapterRequestOptions } from '../adapters/adapter';
import { IProvider } from './provider';
export interface IOAuth2CodeDialogResponse {
    code: string;
    state: string;
}
export interface IOAuth2TokenDialogResponse {
    access_token: string;
    token_type: string;
    expires_in: number;
    state: string;
}
export interface IOAuth2ProviderOptions extends IBaseProviderOptions {
    clientId?: string;
    responseType?: 'code' | 'token';
    scopeDelimiter?: string;
    scopeParams?: string[];
    scopePrefix?: string;
    /**
     * the default is random string
     */
    state?: string;
    baseDialogParams?: string[];
    dialogParams?: string[];
    authenticateParams?: {
        code: string;
        clientId: string;
        redirectUri: string;
        [key: string]: string;
    };
}
export declare class OAuth2Provider extends BaseProvider implements IProvider {
    static extend: (options: IOAuth2ProviderOptions) => typeof OAuth2Provider;
    protected readonly scope: string;
    protected clientId: string;
    protected responseType: 'code' | 'token';
    protected scopeDelimiter: string;
    protected scopeParams: string[];
    protected scopePrefix: string;
    protected state: string;
    protected baseDialogParams: string[];
    protected dialogParams: string[];
    protected authenticateParams: {
        code: string;
        clientId: string;
        redirectUri: string;
        [key: string]: string;
    };
    authenticate<R>(requestOptions: IAdapterRequestOptions): Promise<IAdapterResponse<R>>;
    protected getPermissions(): Promise<IOAuth2CodeDialogResponse | IOAuth2TokenDialogResponse>;
    getAccessToken<R>(oauthData: IOAuth2CodeDialogResponse | IOAuth2TokenDialogResponse, requestOptions: IAdapterRequestOptions): Promise<IAdapterResponse<R>>;
}
