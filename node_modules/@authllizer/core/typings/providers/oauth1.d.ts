import { BaseProvider } from './base';
import { IAdapterResponse, IAdapterRequestOptions } from '../adapters/adapter';
import { IProvider } from './provider';
import { IBaseProviderOptions } from './base';
export interface IOAuth1ProviderOptions extends IBaseProviderOptions {
    requestTokenParams?: {
        redirectUri?: string;
        [key: string]: string;
    };
    authenticateParams?: {
        redirectUri?: string;
        oauth_token?: string;
        oauth_verifier?: string;
        [key: string]: string;
    };
}
export interface IOAuth1RequestTokenResponse {
    oauth_token: string;
    oauth_token_secret: string;
    oauth_callback_confirmed: string;
}
export interface IOAuth1DialogResponse {
    oauth_token: string;
    oauth_verifier: string;
}
export declare class OAuth1Provider extends BaseProvider implements IProvider {
    static extend: (options: IOAuth1ProviderOptions) => typeof OAuth1Provider;
    protected requestTokenParams: {
        redirectUri: string;
        [key: string]: string;
    };
    protected authenticateParams: {
        redirectUri: string;
        oauth_token: string;
        oauth_verifier: string;
        [key: string]: string;
    };
    authenticate<R>(requestOptions?: IAdapterRequestOptions): Promise<IAdapterResponse<R>>;
    protected getRequestToken({provider, type, token}: IAdapterRequestOptions): Promise<IOAuth1RequestTokenResponse>;
    protected getPermissions(requestTokenResponse: IOAuth1RequestTokenResponse): Promise<IOAuth1DialogResponse>;
    protected getAccessToken<R>(oauthData: IOAuth1DialogResponse, requestOptions: IAdapterRequestOptions): Promise<IAdapterResponse<R>>;
}
