import { Directory } from './interface';
import { IStorage } from './storages/storage';
import { ITokenConstructor } from './tokens/token';
import { IAdapter, IAdapterConstructor } from './adapters/adapter';
import { IProvider, IProviderConstructor } from './providers/provider';
import { IDialogConstructor } from './dialogs/dialog';
import { IHttpClient } from './http/http';
export interface IConfigOptions {
    adapter?: IAdapterConstructor;
    dialog?: IDialogConstructor;
    httpClient?: IHttpClient;
    interceptList?: (string | RegExp)[];
    providers?: Directory<IProviderConstructor>;
    storage?: IStorage;
    token?: ITokenConstructor;
}
export declare class Config {
    static Promise: typeof Promise;
    protected _options: Directory<any>;
    readonly adapter: IAdapter;
    readonly dialog: IDialogConstructor;
    readonly httpClient: IHttpClient;
    readonly interceptList: (string | RegExp)[];
    readonly storage: IStorage;
    readonly token: ITokenConstructor;
    constructor(options?: IConfigOptions);
    setOptions(options: IConfigOptions): void;
    provider(provider: string): IProvider;
    isProviderExists(provider: string): boolean;
    isUrlMatchInterceptList(url: string): boolean;
}
