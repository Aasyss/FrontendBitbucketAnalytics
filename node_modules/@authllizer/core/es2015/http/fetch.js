import isObject from '../utils/is-object';
import { BaseHttpClient } from './base';
import extend from '../utils/extend';
// for fetch global scope error 'TypeError: Failed to execute 'fetch' on 'Window': Illegal invocation'
// can be 'fetch.bind(this)' to solve the error.
let fetchBind = (input, init) => fetch(input, init);
export class FetchHttpClient extends BaseHttpClient {
    constructor(client = (typeof fetch !== 'undefined' && fetchBind)) {
        super(client);
    }
    request(url, options) {
        let { method, data, params, headers = {}, withCredentials } = options;
        url = FetchHttpClient.extendUrlQuery(url, params);
        let credentials = (withCredentials === true && 'include') || (withCredentials === false && 'same-origin') || 'omit';
        // Other types of data can be supported
        if (!headers['Content-Type'] && isObject(data)) {
            headers = extend({
                'Content-Type': 'application/json'
            }, headers);
            data = JSON.stringify(data);
        }
        let requestOptions = {
            method,
            body: data,
            credentials,
            headers
        };
        return this._client(url, requestOptions).then((response) => {
            if (response.ok) {
                return response.json();
            }
            else {
                throw response;
            }
        });
    }
}
//# sourceMappingURL=fetch.js.map