import extend from './utils/extend';
import isString from './utils/is-string';
import { AdapterRequestType } from './adapters/adapter';
import { Config } from './config';
import EventEmitter from './utils/event-emitter';
export class Authllizer {
    constructor(options = {}) {
        this._config = new Config;
        this.onChange = new EventEmitter();
        if (options.useClassInstance !== false) {
            return Authllizer.instance.config(options);
        }
        this.config(options);
    }
    static get instance() {
        if (!this.__instance) {
            this.__instance = new Authllizer({ useClassInstance: false });
        }
        return this.__instance;
    }
    config(options) {
        this._config.setOptions(options);
        return this;
    }
    signIn(data) {
        let options = {
            type: AdapterRequestType.signIn,
            data,
            extractToken: true
        };
        return this._config.adapter.request(options).then(({ response, token }) => {
            this.setToken(token);
            return response;
        });
    }
    signUp(data, signIn) {
        let options = {
            type: AdapterRequestType.signUp,
            data,
            extractToken: signIn
        };
        return this._config.adapter.request(options).then(({ response, token }) => {
            if (signIn) {
                this.setToken(token);
            }
            return response;
        });
    }
    signOut(data) {
        let options = {
            type: AdapterRequestType.signOut,
            data,
            token: this.getToken()
        };
        return this._config.adapter.request(options).then(({ response }) => {
            this.removeToken();
            return response;
        });
    }
    authenticate(provider, data) {
        let options = {
            type: AdapterRequestType.authenticate,
            data,
            extractToken: true,
            provider
        };
        return this._config.provider(provider).authenticate(options).then(({ response, token }) => {
            this.setToken(token);
            return response;
        });
    }
    link(provider, data) {
        let options = {
            type: AdapterRequestType.link,
            data,
            token: this.getToken(),
            provider
        };
        return this._config.provider(provider).authenticate(options).then(({ response }) => response);
    }
    unlink(provider, data) {
        let options = {
            type: AdapterRequestType.unlink,
            data: extend({ provider }, data),
            token: this.getToken()
        };
        return this._config.adapter.request(options).then(({ response }) => response);
    }
    refresh(data) {
        let options = {
            type: AdapterRequestType.refresh,
            data,
            token: this.getToken(),
            extractToken: true
        };
        return this._config.adapter.request(options).then(({ token, response }) => {
            this.setToken(token);
            return response;
        });
    }
    isAuthenticated() {
        let token = this.getToken();
        return token ? token.isValid() : false;
    }
    getToken() {
        let token = this._config.storage.getToken();
        let Token = this._config.token;
        let tokenObject;
        try {
            tokenObject = new Token(token);
        }
        catch (e) {
        }
        return tokenObject;
    }
    setToken(token) {
        if (isString(token)) {
            let Token = this._config.token;
            token = new Token(token);
        }
        this._config.storage.setToken(token);
        this.onChange.emit(true);
    }
    removeToken() {
        this._config.storage.removeToken();
        this.onChange.emit(false);
    }
    /**
     * for easily create intercepts, checking if necessary to intercept
     * this method checks to see if there is an authenticated user and if there is a match in config.interceptList
     * @param {string} url - url to check
     * @returns {boolean} - if need to intercept
     */
    toIntercept(url) {
        return this.isAuthenticated() && this._config.isUrlMatchInterceptList(url);
    }
}
//# sourceMappingURL=authllizer.js.map