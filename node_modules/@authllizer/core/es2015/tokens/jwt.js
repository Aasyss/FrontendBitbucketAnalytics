/**
 * @resource https://tools.ietf.org/html/rfc7519
 */
import decodeBase64 from '../utils/decode-base64';
import isString from '../utils/is-string';
export class JWT {
    constructor(token) {
        this.headerPrefix = 'Bearer';
        this._token = String(token);
        this._payload = JWT.parse(this._token);
    }
    static parse(token) {
        if (!isString(token) || !this.JWT_RX.test(token)) {
            throw new Error('Token is invalid or missing.');
        }
        let [, base64Url] = token.split('.');
        let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        return JSON.parse(decodeBase64(base64));
    }
    get expire() {
        let { exp } = this._payload;
        return new Date(exp * 1000);
    }
    getPayload() {
        return this._payload;
    }
    isExpired() {
        return new Date() > this.expire;
    }
    isValid() {
        return !this.isExpired();
    }
    toHeader() {
        return `${this.headerPrefix} ${this._token}`;
    }
    toString() {
        return this._token;
    }
    toJSON() {
        return this._payload;
    }
}
JWT.JWT_RX = /^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$/;
//# sourceMappingURL=jwt.js.map