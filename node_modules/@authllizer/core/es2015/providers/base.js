import extendClass from '../utils/extend-class';
import extend from '../utils/extend';
import forEach from '../utils/for-each';
export class BaseProvider {
    constructor(adapter, dialogClass) {
        this.redirectUri = window.location.origin;
        this._adapter = this._adapter || adapter;
        this._dialog = this._dialog || dialogClass;
    }
    openDialog(url) {
        let { _dialog: Dialog, name, redirectUri, displayOptions } = this;
        let dialog = new Dialog(name, redirectUri, displayOptions);
        return dialog.open(url).then((response) => {
            this.checkDialogResponse(response);
            return response;
        });
    }
    /**
     * this method can be overridden, for handling unique provider dialog errors
     * @param params
     */
    checkDialogResponse(params = {}) {
        if (params.error) {
            throw new Error(params.error);
        }
    }
    prepareData(requestKeys, ...args) {
        let params = {};
        let data = extend(...args);
        forEach(requestKeys, (requestKey, key) => {
            if (!key) {
                return;
            }
            let value = data[key] || this[key];
            if (value) {
                params[requestKey] = value;
            }
        });
        return params;
    }
}
BaseProvider.extend = extendClass;
//# sourceMappingURL=base.js.map