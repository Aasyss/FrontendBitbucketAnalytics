/**
 * @resource https://tools.ietf.org/html/rfc5849
 */
import extend from '../utils/extend';
import stringifyQuery from '../utils/stringify-query';
import { BaseProvider } from './base';
export class OAuth1Provider extends BaseProvider {
    constructor() {
        super(...arguments);
        this.requestTokenParams = {
            redirectUri: 'callback'
        };
        this.authenticateParams = {
            redirectUri: 'callback',
            oauth_token: 'oauth_token',
            oauth_verifier: 'oauth_verifier'
        };
    }
    authenticate(requestOptions) {
        return this.getRequestToken(requestOptions).then((requestTokenResponse) => {
            return this.getPermissions(requestTokenResponse).then((dialogResponse) => {
                return this.getAccessToken(dialogResponse, requestOptions);
            });
        });
    }
    getRequestToken({ provider, type, token }) {
        let { requestTokenParams } = this;
        let data = this.prepareData(requestTokenParams);
        let options = {
            type,
            data,
            provider,
            token
        };
        return this._adapter.request(options).then(({ response }) => response);
    }
    getPermissions(requestTokenResponse) {
        let query = stringifyQuery(requestTokenResponse, { delimiter: '&' });
        let url = [this.authorizationEndpoint, query].join('?');
        return this.openDialog(url);
    }
    getAccessToken(oauthData, requestOptions) {
        let { authenticateParams } = this;
        let data = this.prepareData(authenticateParams, oauthData);
        requestOptions.data = extend(data, requestOptions.data);
        return this._adapter.request(requestOptions);
    }
}
//# sourceMappingURL=oauth1.js.map