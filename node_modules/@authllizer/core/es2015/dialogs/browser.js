import normalizeLocation from '../utils/normalize-location';
import { Config } from '../config';
import { PopupDialog } from './popup';
export class BrowserDialog extends PopupDialog {
    get dialogName() {
        return window.navigator.userAgent.indexOf('CriOS') > -1 ? '_blank' : this.name;
    }
    setDisplayOptions(displayOptions = {}) {
        displayOptions.height = displayOptions.height || 500;
        displayOptions.width = displayOptions.width || 500;
        super.setDisplayOptions({
            top: window.screenY + ((window.outerHeight - displayOptions.height) / 2.5),
            left: window.screenX + ((window.outerWidth - displayOptions.width) / 2)
        }, displayOptions);
    }
    open(url) {
        this._popup = window.open(url, this.dialogName, this.stringDisplayOptions);
        this.focus();
        return this.listen().then((url) => {
            return BrowserDialog.parseUrl(url);
        });
    }
    listen() {
        return new Config.Promise((resolve, reject) => {
            let redirectUri = normalizeLocation(this.redirectUri, { path: true });
            let intervalId = setInterval(() => {
                if (this.isClosed()) {
                    clearInterval(intervalId);
                    return reject(new Error('The dialog was closed'));
                }
                try {
                    let url = normalizeLocation(this._popup.location, { path: true, data: true });
                    if (url.indexOf(redirectUri) === 0) {
                        this.close();
                        clearInterval(intervalId);
                        resolve(url);
                    }
                }
                catch (error) {
                    // Ignore DOMException: Blocked a frame with origin from accessing a cross-origin frame.
                    // A hack to get around same-origin security policy errors in IE.
                }
            }, 500);
        });
    }
}
//# sourceMappingURL=browser.js.map