import merge from '../utils/merge';
import extendClass from '../utils/extend-class';
import isString from '../utils/is-string';
import get from '../utils/get';
import joinUrl from '../utils/join-url';
export class BackendAdapter {
    constructor(httpClient) {
        this.baseUrl = '/auth';
        this.signIn = '/signin';
        this.signOut = '/signout';
        this.signUp = '/signup';
        this.authenticate = '';
        this.link = '';
        this.unlink = '/unlink';
        this.refresh = '/refresh';
        this.defaultHttpOptions = {
            method: 'POST',
            data: {},
            params: {},
            headers: {},
            withCredentials: false
        };
        this.providerInUrl = true;
        this.tokenPath = 'access_token';
        this._httpClient = httpClient;
    }
    request(requestOptions) {
        let { extractToken } = requestOptions;
        let stateOptions = this.getDefaultRouteOptions(requestOptions);
        let url = this.prepareUrl(requestOptions, stateOptions);
        let httpOptions = this.prepareOptions(requestOptions, stateOptions);
        return this._httpClient.request(url, httpOptions).then((response) => {
            let adapterResponse = { response };
            if (extractToken) {
                adapterResponse.token = this.extractToken(response);
            }
            return adapterResponse;
        });
    }
    prepareUrl({ provider }, { url }) {
        if (provider && this.providerInUrl) {
            url = joinUrl(url, provider);
        }
        return this.baseUrl ? joinUrl(this.baseUrl, url) : url;
    }
    prepareOptions({ token, provider, data }, { httpOptions: routeHttpOptions }) {
        let { defaultHttpOptions, providerInUrl } = this;
        let options = {
            data: {},
            params: {},
            headers: {}
        };
        if (provider && !providerInUrl) {
            data['provider'] = provider;
        }
        if (token) {
            options.headers['Authorization'] = token.toHeader();
        }
        let extendOptions = merge({
            data: {},
            params: {},
            headers: {}
        }, defaultHttpOptions, routeHttpOptions, options);
        extendOptions.method = isString(extendOptions.method) ? extendOptions.method.toUpperCase() : 'POST';
        return this.prepareData(extendOptions, data);
    }
    getDefaultRouteOptions({ type }) {
        let options = isString(this[type]) ? { url: this[type] } : this[type] || {};
        options.url = isString(options.url) ? options.url : `/${type}`;
        return options;
    }
    prepareData(httpOptions, data) {
        let { method } = httpOptions;
        let BODY_METHOD;
        (function (BODY_METHOD) {
            BODY_METHOD[BODY_METHOD["POST"] = 0] = "POST";
            BODY_METHOD[BODY_METHOD["PUT"] = 1] = "PUT";
            BODY_METHOD[BODY_METHOD["PATCH"] = 2] = "PATCH";
        })(BODY_METHOD || (BODY_METHOD = {}));
        if (method in BODY_METHOD) {
            merge(httpOptions.data, data);
            // remove data if data empty
            if (httpOptions.data && !Object.keys(httpOptions.data).length) {
                delete httpOptions.data;
            }
        }
        else {
            merge(httpOptions.params, httpOptions.data, data);
            delete httpOptions.data;
        }
        return httpOptions;
    }
    extractToken(response) {
        let { tokenPath } = this;
        return get(response, tokenPath);
    }
}
BackendAdapter.extend = extendClass;
//# sourceMappingURL=backend.js.map